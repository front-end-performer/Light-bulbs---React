{"version":3,"sources":["components/Bulbs/Lighter/Lighter.js","components/Section/Section.js","layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["Lighter","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleHandler","setState","prev","isOn","state","attachedCls","push","console","log","react_default","a","createElement","className","join","onClick","children","Component","Section","lights","isEmpty","addLamp","id","Math","random","Bulbs_Lighter_Lighter","key","deletLamp","pop","map","bulb","autoSwitch","Layout","components_Section_Section","App","src_layout_Layout","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gUAgCeA,2BA5BX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMVQ,cAAgB,WACbP,EAAKQ,SAAU,SAAAC,GACX,MAAO,CAAEC,MAAOD,EAAKC,SAPxBV,EAAKW,MAAQ,CACTD,MAAM,GAHKV,wEAcf,IAAMY,EAAc,CAAC,iBAKrB,OAJIT,KAAKQ,MAAMD,OACXE,EAAYC,KAAK,MACjBC,QAAQC,IAAIH,IAGZI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAWP,EAAYQ,KAAK,OACjCJ,EAAAC,EAAAC,cAAA,UAAQG,QAASlB,KAAKI,cAAeY,UAAU,oBAAoBhB,KAAKJ,MAAMuB,kBAvBxEC,cC2CPC,6MAvCXb,MAAQ,CACJc,OAAQ,GACRC,SAAS,KAGbC,QAAU,WACN,IAAIC,EAAKC,KAAKC,SACd9B,EAAKW,MAAMc,OAAOZ,KAAKG,EAAAC,EAAAC,cAACa,EAAD,CAASC,IAAKJ,GAAd,OACvB5B,EAAKQ,SAAUR,EAAKW,MAAMe,QAA8B,KAApB1B,EAAKW,MAAMc,QAC/CX,QAAQC,IAAIf,EAAKW,MAAMc,WAG3BQ,UAAY,WACR,IAAIL,EAAKC,KAAKC,SACd9B,EAAKW,MAAMc,OAAOS,IAAIlB,EAAAC,EAAAC,cAACa,EAAD,CAASC,IAAKJ,GAAd,OACtB5B,EAAKQ,SAAUR,EAAKW,MAAMe,QAA8B,KAApB1B,EAAKW,MAAMc,iFAK/C,OACIT,EAAAC,EAAAC,cAAA,WAASC,UAAU,WACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACVhB,KAAKQ,MAAMc,OAAOU,IAAI,SAAAC,GACnB,OAAOA,KAGfpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAME,QAASlB,KAAKwB,SAAtC,gBACAX,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAME,QAASlB,KAAK8B,WAAtC,eACAjB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAME,QAASlB,KAAKkC,YAAtC,8BAhCFd,aCOPe,EANA,WACX,OACItB,EAAAC,EAAAC,cAACqB,EAAD,OCGOC,MARf,WACE,OACExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACuB,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.73637c11.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../Lighter/Lighter.css';\n\nclass Lighter extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isOn: false\n        }\n    }\n\n    toggleHandler = () => {\n       this.setState( prev => {\n           return { isOn: !prev.isOn }\n       });\n    }\n\n    render() {\n        const attachedCls = ['lighter_light'];\n        if (this.state.isOn) {\n            attachedCls.push('on');\n            console.log(attachedCls);\n        }\n        return (\n            <div className=\"lighter\">\n                <div className={attachedCls.join(' ')}></div>\n                <button onClick={this.toggleHandler} className=\"lighter_switcher\">{this.props.children}</button>\n            </div>\n        );\n    }\n};\n\nexport default Lighter;","import React, { Component } from 'react';\nimport '../Section/Section.css';\n\n//Component\nimport Lighter from '../Bulbs/Lighter/Lighter';\n\nclass Section extends Component {\n    state = {\n        lights: [],\n        isEmpty: false\n    }\n\n    addLamp = () => {\n        let id = Math.random();\n        this.state.lights.push(<Lighter key={id}>On</Lighter>)\n        this.setState(!this.state.isEmpty ? this.state.lights : null)\n        console.log(this.state.lights);\n    }\n\n    deletLamp = () => {\n        let id = Math.random();\n        this.state.lights.pop(<Lighter key={id}>On</Lighter>)\n        this.setState(!this.state.isEmpty ? this.state.lights : null)\n    }\n\n\n    render() {\n        return (\n            <section className=\"section\">\n                <div className=\"section_conteiner\">\n                    <div className=\"lights_container\">\n                        {this.state.lights.map(bulb => {\n                            return bulb\n                        })}\n                    </div>\n                    <div className=\"switch_container\">\n                        <button className=\"btn\" onClick={this.addLamp} >add new lamp</button>\n                        <button className=\"btn\" onClick={this.deletLamp} >delete lamp</button>\n                        <button className=\"btn\" onClick={this.autoSwitch} >auto switch lamp</button>\n                    </div>\n                </div>\n            </section>\n        );\n    }\n}\n\nexport default Section;","import React from 'react';\nimport '../layout/Layout.css';\n\n//Component\nimport Section from '../components/Section/Section';\n\n\nconst Layout = () => {\n    return (\n        <Section />\n    );\n}\n\nexport default Layout;\n\n","import React from 'react';\nimport './App.css';\nimport Layout from './layout/Layout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}